// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in;
in vec4 view_pos_fs_in;
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Set up the point light
  float theta = animation_seconds * (M_PI / 5.0);
  mat4 rotate = mat4(
    cos(theta), 0, 0, 0,
    0, 1, 0, 0,
    0, 0, sin(theta), 0,
    0, 0, 0, 1
  );
  vec3 pointlight = (view * rotate * vec4(5, 5, 6, 1)).xyz;

  // Get the Blinn-Phone shading elements in the camera frame/coordinates
  vec3 p = view_pos_fs_in.xyz;                  // point
  vec3 n = normalize(normal_fs_in);
  vec3 v = -normalize(p);
  vec3 l = normalize(pointlight - p);

  // --------- Add some noise ---------
  // float lightning = abs(2 * sin(3 * perlin_noise(2 * pointlight)));
  vec3 sp = sphere_fs_in;
  vec3 tempvec = vec3(sp.y, sp.y, sp.z + sp.y);
  float marble = sin(3 * perlin_noise(5 * tempvec) + cos(4));
  float randpattern = abs(sin(6 * perlin_noise(4 * sphere_fs_in)));

  // Set the lighting coefficients
  float phong_exp = 500;
  vec3 ka, kd, ks;
  ka = vec3(0.03);
  if (is_moon) {
    kd = mix(vec3(0.5), vec3(1), randpattern);
    ks = vec3(1.0);
  } else {
    kd = mix(vec3(0.2, 0.2, 0.8), vec3(0.8, 0.2, 0.2), marble);
    ks = vec3(1.0);
  }

  color = blinn_phong(ka, kd, ks, phong_exp, n, v, l);
  /////////////////////////////////////////////////////////////////////////////
}
